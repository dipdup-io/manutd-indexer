# generated by DipDup 8.0.0b4

from __future__ import annotations

from typing import Any
from typing import Dict
from typing import Type

from pydantic import RootModel

from manutd_indexer.models import AbstractBigMapAction
from manutd_indexer.models import TokenMetadataBigMapModelMixin
from manutd_indexer.models import TokenMetadataBigMapState


class AssetsTokenMetadataKey(RootModel[str]):
    root: str

    def get_field_dto(self) -> Dict[str, Any]:
        name = TokenMetadataBigMapModelMixin.token_id.model_field_name

        return {name: self.root}

    @staticmethod
    def get_state_model() -> Type[TokenMetadataBigMapState]:
        return TokenMetadataBigMapState

    @staticmethod
    def get_composite_key_fields() -> list[str]:
        return [
            AbstractBigMapAction.network.model_field_name,
            TokenMetadataBigMapModelMixin.contract.model_field_name,
            TokenMetadataBigMapModelMixin.token_id.model_field_name,
        ]
